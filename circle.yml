machine:
  services:
    - postgresql
    - docker

dependencies:
  cache_directories:
    - "~/cache/"
  override:
    - docker info
    # use circleci's docker cache workaround
    - mkdir -p ~/cache/
    - if [ -e ~/cache/docker/image.tar ]; then echo "Loading image.tar"; docker load -i ~/cache/docker/image.tar || rm ~/cache/docker/image.tar; fi
    # build image
    - docker build -t normandy:build .
    # Get MaxMind GeoIP database
    - cd ~/cache/ && ~/normandy/bin/download_geolite2.sh

test:
  pre:
    - chmod -R 777 $CIRCLE_TEST_REPORTS
  override:
    # Run Python lint checks
    - >
      docker run --net host
      -v $CIRCLE_TEST_REPORTS:/test_artifacts
      normandy:build flake8 --output-file /test_artifacts/flake8.txt normandy
    # Run JS lint checks
    - >
      docker run --net host
      -v $CIRCLE_TEST_REPORTS:/test_artifacts
      normandy:build node_modules/.bin/eslint normandy -f junit -o /test_artifacts/eslint.xml
    # Run Python tests
    - >
      docker run --net host -e DJANGO_CONFIGURATION=Test
      -v $CIRCLE_TEST_REPORTS:/test_artifacts
      -v ~/cache/GeoLite2-Country.mmdb:/app/GeoLite2-Country.mmdb
      normandy:build py.test --junitxml=/test_artifacts/pytest.xml
    # Start Karma test server, and run them in Firefox
    - >
      (
        docker run --net host -e CHECK_PORT=9876 -e CHECK_HOST=localhost giorgos/takis;
        echo Starting Firefox;
        firefox localhost:9876
      ) &
      docker run --net host -p 9876:9876
      -v $CIRCLE_TEST_REPORTS:/test_artifacts
      normandy:build node bin/karma-ci.js
  post:
    # Save test artifacts for Python and Lint tests
    - >
      docker run -v $CIRCLE_TEST_REPORTS:/test_artifacts
      normandy:build flake8_junit /test_artifacts/flake8.txt /test_artifacts/flake8.xml
    # Clean up old image and save the new one
    - mkdir -p ~/cache/docker; test '!' -e ~/cache/docker/image.tar || rm ~/cache/docker/image.tar; docker save normandy:build > ~/cache/docker/image.tar; ls -l ~/cache/docker

# appropriately tag and push the container to dockerhub
deployment:
  latest:
    branch: master
    commands:
      # set DOCKER_DEPLOY=true in Circle UI to do deploys
      - "${DOCKER_DEPLOY:-false}"
      - bin/deploy/dockerhub.sh latest

  tags:
    # push all tags
    tag: /.*/
    commands:
      # set DOCKER_DEPLOY=true in Circle UI to do deploys
      - "${DOCKER_DEPLOY:-false}"
      - bin/deploy/dockerhub.sh "$CIRCLE_TAG"
